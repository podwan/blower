<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Blower.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Blower.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Apr 12 10:48:36 2024
<BR><P>
<H3>Maximum Stack Usage =         84 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ADC1_2_IRQHandler &rArr; CoreMachine &rArr; UsOut &rArr; SvpwmOut &rArr; VectorActionTimeCalculate
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1]">ADC1_2_IRQHandler</a> from main.o(i.ADC1_2_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[2]">Main</a> from main.o(i.Main) referenced from startup.o(.text)
 <LI><a href="#[3]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, startup.o(.text))

<P><STRONG><a name="[1]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ADC1_2_IRQHandler &rArr; CoreMachine &rArr; UsOut &rArr; SvpwmOut &rArr; VectorActionTimeCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanfHeatTrigger
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSample
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcFilter
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>AdcFilter</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, adc.o(i.AdcFilter))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>AdcSample</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, adc.o(i.AdcSample))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[12]"></a>CalAdcOffset</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, adc.o(i.CalAdcOffset))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
</UL>

<P><STRONG><a name="[25]"></a>CalAtan</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, math.o(i.CalAtan))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalAtan
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUs
</UL>

<P><STRONG><a name="[27]"></a>CalSinCos</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, math.o(i.CalSinCos))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalSinCos
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParkAngleSinCos
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotorAnglePLL
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUxyz
</UL>

<P><STRONG><a name="[24]"></a>CalSqrt</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, math.o(i.CalSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalSqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUs
</UL>

<P><STRONG><a name="[b]"></a>CoreInitialize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, core.o(i.CoreInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CoreInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PllInitialize
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageInitialize
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInitialize
</UL>

<P><STRONG><a name="[5]"></a>CoreMachine</STRONG> (Thumb, 1052 bytes, Stack size 8 bytes, core.o(i.CoreMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CoreMachine &rArr; UsOut &rArr; SvpwmOut &rArr; VectorActionTimeCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParkAngleSinCos
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open6WorkPwm
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open3LowPwm
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close6Pwm
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotorAnglePLL
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PllInitialize
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageInitialize
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsOut
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUs
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentOffset
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentSample
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentInitialize
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdcOffset
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalAdcOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>CurrentInitialize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, current.o(i.CurrentInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInitialize
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
</UL>

<P><STRONG><a name="[f]"></a>CurrentSample</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, current.o(i.CurrentSample))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CurrentSample &rArr; GetIdq &rArr; MulFrac
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIdq
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIalphabeta
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIabc
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
</UL>

<P><STRONG><a name="[1d]"></a>FLASH_write</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, flash.o(i.FLASH_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_unlock
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectApp
</UL>

<P><STRONG><a name="[13]"></a>GetCurrentOffset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, current.o(i.GetCurrentOffset))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
</UL>

<P><STRONG><a name="[18]"></a>GetUs</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, voltage.o(i.GetUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetUs &rArr; IpiControl
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltRippleComp
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IpiControl
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MulFrac
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSqrt
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalAtan
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
</UL>

<P><STRONG><a name="[3b]"></a>HeatApp</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, heat.o(i.HeatApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HeatApp
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[36]"></a>HeatInitialize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, heat.o(i.HeatInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[11]"></a>InitAdcOffset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc.o(i.InitAdcOffset))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
</UL>

<P><STRONG><a name="[28]"></a>Initialize</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, initialize.o(i.Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Initialize &rArr; MotorInitialize &rArr; CoreInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchInitialize
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectInitialize
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInitialize
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInitialize
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInitialize
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatInitialize
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClockInit
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmInit
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpAmpInit
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvicInit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacInit
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompInit
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDICInit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[22]"></a>IpiControl</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, pi.o(i.IpiControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IpiControl
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RotorAnglePLL
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUs
</UL>

<P><STRONG><a name="[38]"></a>KeyApp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, key.o(i.KeyApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyApp
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[33]"></a>KeyInitialize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, key.o(i.KeyInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[3c]"></a>LedApp</STRONG> (Thumb, 748 bytes, Stack size 0 bytes, led.o(i.LedApp))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[32]"></a>LedInitialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(i.LedInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[2]"></a>Main</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i.Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Main &rArr; ProtectApp &rArr; FLASH_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchApp
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectApp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorApp
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedApp
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyApp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatApp
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>MotorApp</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, motor.o(i.MotorApp))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[35]"></a>MotorInitialize</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, motor.o(i.MotorInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorInitialize &rArr; CoreInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[20]"></a>MulFrac</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, math.o(i.MulFrac))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MulFrac
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUs
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUalphabeta
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIdq
</UL>

<P><STRONG><a name="[3f]"></a>PageErase</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, flash.o(i.PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PageErase
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_unlock
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectApp
</UL>

<P><STRONG><a name="[e]"></a>PllInitialize</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pll.o(i.PllInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInitialize
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
</UL>

<P><STRONG><a name="[3e]"></a>ProtectApp</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, protect.o(i.ProtectApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ProtectApp &rArr; FLASH_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageErase
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[37]"></a>ProtectInitialize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, protect.o(i.ProtectInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[17]"></a>RotorAnglePLL</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, pll.o(i.RotorAnglePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RotorAnglePLL &rArr; IpiControl
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IpiControl
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSinCos
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
</UL>

<P><STRONG><a name="[7]"></a>ScanfHeatTrigger</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, heat.o(i.ScanfHeatTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[3a]"></a>SwitchApp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, switch.o(i.SwitchApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SwitchApp
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSwitchSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[34]"></a>SwitchInitialize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, switch.o(i.SwitchInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[16]"></a>UsOut</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, voltage.o(i.UsOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UsOut &rArr; SvpwmOut &rArr; VectorActionTimeCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvpwmOut
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUxyz
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsSector
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUalphabeta
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
</UL>

<P><STRONG><a name="[c]"></a>VoltageInitialize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, voltage.o(i.VoltageInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInitialize
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9]"></a>AdcInit</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, initialize.o(i.AdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdcInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[2f]"></a>CORDICInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, initialize.o(i.CORDICInit))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[2d]"></a>CompInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, initialize.o(i.CompInit))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[2b]"></a>DacInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, initialize.o(i.DacInit))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[2a]"></a>GpioInit</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, initialize.o(i.GpioInit))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[31]"></a>NvicInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, initialize.o(i.NvicInit))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[2c]"></a>OpAmpInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, initialize.o(i.OpAmpInit))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[2e]"></a>PwmInit</STRONG> (Thumb, 454 bytes, Stack size 8 bytes, initialize.o(i.PwmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PwmInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[29]"></a>SysClockInit</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, initialize.o(i.SysClockInit))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[30]"></a>Timer1Init</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, initialize.o(i.Timer1Init))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[a]"></a>delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, initialize.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmInit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[8]"></a>SysTimeCount</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, main.o(i.SysTimeCount))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[39]"></a>KeyScanf</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, key.o(i.KeyScanf))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyApp
</UL>

<P><STRONG><a name="[42]"></a>GetSwitchSpeed</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, switch.o(i.GetSwitchSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchApp
</UL>

<P><STRONG><a name="[1f]"></a>Flash_lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash.o(i.Flash_lock))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageErase
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write
</UL>

<P><STRONG><a name="[1e]"></a>Flash_unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash.o(i.Flash_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageErase
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write
</UL>

<P><STRONG><a name="[1a]"></a>GetIabc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, current.o(i.GetIabc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetIabc
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentSample
</UL>

<P><STRONG><a name="[1b]"></a>GetIalphabeta</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, current.o(i.GetIalphabeta))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetIalphabeta
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentSample
</UL>

<P><STRONG><a name="[1c]"></a>GetIdq</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, current.o(i.GetIdq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetIdq &rArr; MulFrac
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MulFrac
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentSample
</UL>

<P><STRONG><a name="[21]"></a>GetUalphabeta</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, voltage.o(i.GetUalphabeta))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUalphabeta &rArr; MulFrac
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MulFrac
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsOut
</UL>

<P><STRONG><a name="[43]"></a>GetUsSector</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, voltage.o(i.GetUsSector))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsOut
</UL>

<P><STRONG><a name="[26]"></a>GetUxyz</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, voltage.o(i.GetUxyz))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetUxyz &rArr; CalSinCos
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSinCos
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsOut
</UL>

<P><STRONG><a name="[40]"></a>SvpwmOut</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, voltage.o(i.SvpwmOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SvpwmOut &rArr; VectorActionTimeCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorActionTimeCalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsOut
</UL>

<P><STRONG><a name="[41]"></a>VectorActionTimeCalculate</STRONG> (Thumb, 106 bytes, Stack size 28 bytes, voltage.o(i.VectorActionTimeCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VectorActionTimeCalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvpwmOut
</UL>

<P><STRONG><a name="[23]"></a>VoltRippleComp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, voltage.o(i.VoltRippleComp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VoltRippleComp
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUs
</UL>

<P><STRONG><a name="[10]"></a>Close6Pwm</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, core.o(i.Close6Pwm))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
</UL>

<P><STRONG><a name="[14]"></a>Open3LowPwm</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, core.o(i.Open3LowPwm))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
</UL>

<P><STRONG><a name="[15]"></a>Open6WorkPwm</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, core.o(i.Open6WorkPwm))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
</UL>

<P><STRONG><a name="[19]"></a>ParkAngleSinCos</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, core.o(i.ParkAngleSinCos))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ParkAngleSinCos &rArr; CalSinCos
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSinCos
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreMachine
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
